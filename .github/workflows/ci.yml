# Define Workflow Triggers new
name: CI Pipeline for Python App

on:
  push:
    branches:
      - ci-actions
  pull_request:
    branches:
      - ci-actions

# Define Jobs: db setup and app build jobs


# Part 1: db Setup and test
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: address_book
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306
  steps:
    # Step 1: Wait for MySQL service
    - name: Wait for MySQL
      run: |
        until mysqladmin ping -h127.0.0.1 --silent; do
          echo "Waiting for MySQL to be ready..."
          sleep 2
        done

# Part 2: Define Jobs: db setup and app build jobs
  steps:
    ...
    # Step 2: Checkout code
    - name: Checkout code
      uses: actions/checkout@v3
    # Step 3: Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    # Step 4: Install virtual environment
    - name: Install venv tools
      run: sudo apt-get install -y python3-venv
    # Step 5: Specify the paths to clean explicitly*
    - name: Clean workspace
      run: rm -rf venv __pycache__
    # Step 6: Set up virtual environment
    - name: Set up virtual environment and install dependencies
      run: |
        python3 -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt

# Part 2: Define Jobs: db setup and app build jobs ...cont’d
    # Step 7: Run tests
    - name: Run tests
      run: |
        source venv/bin/activate
        pytest
    # Step 8: Package the app as a zip file
    - name: Create artifact
    run: |
      TIMESTAMP=$(date +%Y%m%d%H%M%S)
      zip -r address-book-python-${TIMESTAMP}.zip .
      echo "ARTIFACT_NAME=address-book-python-${TIMESTAMP}.zip" >> $GITHUB_ENV
    # Step 9: Verify artifact
    - name: Verify artifact
      run: ls -la address-book-python-*.zip
    # Step 10: Upload zipped artifact to S3
    - name: Upload artifact to S3
      run: |
        aws s3 cp ${{ env.ARTIFACT_NAME }} s3://ciartefacts/
        aws s3 ls s3://ciartefacts/
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-1

# Define Jobs: db setup and app build jobs ...cont’d
    # Step 11: Send success email notification
    - name: Send success email notification
      run: |
        curl -s --user "api:${{ secrets.MAILGUN_API_KEY }}" \
        https://api.mailgun.net/v3 \
        -F from="CI Pipeline <mailgun@jadoobabs.com>" \
        -F to="ibrahimbello349@gmail.com, faithskool4u@gmail.com" \
        -F subject="CI Pipeline Status: Success" \
        -F text="The build artifact has been successfully created and \
          uploaded to S3." \
        -w "\nHTTP Status Code: %{http_code}\n"
    # Step 12: Send failure email notification
    - name: Send failure notification
      if: failure()
      run: |
        curl -s --user "api:${{ secrets.MAILGUN_API_KEY }}" \
        https://api.mailgun.net/v3 \
        -F from="CI Pipeline <mailgun@jadoobabs.com>" \
        -F to="ibrahimbello349@gmail.com" \
        -F subject="CI Pipeline Status: Failure" \
        -F text="The CI pipeline has failed. Please check the logs."
